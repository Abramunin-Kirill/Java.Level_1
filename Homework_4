package lessons.Lesson_4;

import java.util.Random; // Утилита для Random
import java.util.Scanner; // Утилита для Scanner

public class Homework_4 {

    public static char[][] map; // Массив карты
    public static final int SIZE = 5; // Размер карты - уже заменил, согласно третьему заданию
    public static final int DOTS_TO_WIN = 4; // Точки для победы - уже заменил, согласно третьему заданию 

    public static final char DOT_EMPTY = '•'; // Пустоты
    public static final char DOT_X = 'X'; // X
    public static final char DOT_O = 'O'; // O

    // Метод main
    public static void main(String[] args) {
        initMap();
        printMap();
        while (true) {
            humanTurn();
            printMap();
            if (checkWin0(DOT_X)) {System.out.println("Победил человек");break;}
            if (isMapFull()) {System.out.println("Ничья");break;};
            aiTurn();
            printMap();
            if (checkWin0(DOT_O)) {System.out.println("Победил искусственный интеллект");break;}
            if (isMapFull()) {System.out.println("Ничья");break;};
        }
        System.out.println("Игра завершена");


    }

    // Инициализации карты
    public static void initMap() {
        map = new char[SIZE][SIZE];
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                map[i][j] = DOT_EMPTY;
            }
        }
    }

    // Принт карты
    public static void printMap() {
        for(int i = 0; i <= SIZE; i++) {
            System.out.print(i + " ");
        }
        System.out.println();
        for (int i = 0; i < SIZE; i++) {
            System.out.print((i + 1)+ " ");
            for (int j = 0; j < SIZE; j++) {
                System.out.print(map[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // Ход игрока
    public static void humanTurn() {
        Scanner scanner = new Scanner(System.in);
        int x;
        int y;
        do {
            System.out.println("Введите координаты в формате X Y");
            x = scanner.nextInt() - 1;
            y = scanner.nextInt() - 1;
        } while (!isCellValid(x, y));
        map[y][x] = DOT_X;
    }

    // Проверка условий ввода данных в консоль
    public static boolean isCellValid(int x, int y) {
        if (x < 0 || x >= SIZE || y < 0 || y >= SIZE) {
            return false;
        }
        if (map[y][x] == DOT_EMPTY) {
            return true;
        }
        return false;
    }

    // Ход компьютера
    public static void aiTurn() {
        Random random = new Random();
        int x;
        int y;

        do {
            x = random.nextInt(SIZE);
            y = random.nextInt(SIZE);
        } while (!isCellValid(x, y));
        System.out.println("Компьютер совершил ход в точку " + (x + 1) + " " + (y + 1));
        map[y][x] = DOT_O;
    }

    // Проверка победы - как на уроке
/*   public static boolean checkWin0 (char symb) {
        if (map[0][0] == symb && map[0][1] == symb && map[0][2] == symb) {return true;}
        if (map[1][0] == symb && map[1][1] == symb && map[1][2] == symb) {return true;}
        if (map[2][0] == symb && map[2][1] == symb && map[2][2] == symb) {return true;}
        if (map[0][0] == symb && map[1][0] == symb && map[2][0] == symb) {return true;}
        if (map[0][1] == symb && map[1][1] == symb && map[2][1] == symb) {return true;}
        if (map[0][2] == symb && map[1][2] == symb && map[2][2] == symb) {return true;}
        if (map[0][0] == symb && map[1][1] == symb && map[2][2] == symb) {return true;}
        if (map[2][0] == symb && map[1][1] == symb && map[0][2] == symb) {return true;}
        return false;
    }
*/

    // Проверка победы - второе задание:
    public static boolean checkWin0 (char symb) {
        return (checkRow(symb) || checkColumn(symb) || checkDiagonal(symb)); // Если мы не просчитываем все возможные варианты построчно, то просчитаем алгоритмом три возможных варианта победы: строкой, столбцом или диагональю
    }

    // Проверка строк
    public static boolean checkRow (char symb) {
        for (int i = 0; i < SIZE; i++) {
            int couter = 0;
            for (int j = 0; j < SIZE; j++) {
                if (map[i][j] == symb) { couter++; }
                if (couter == DOTS_TO_WIN) { return true; }
            }
        }
        return false;
    }

    // Проверка столбцов
    public static boolean checkColumn(char symb) {
        for (int i = 0; i < SIZE; i++) {
            int couter = 0;
            for (int j = 0; j < SIZE; j++) {
                if (map[j][i] == symb) { couter++; }
                if (couter == DOTS_TO_WIN) { return true; }
            }
        }
        return false;
    }

    // Проверка диагоналей
    public static boolean checkDiagonal(char symb) {
        int counter = 0;
        for (int i = 0; i < SIZE; i++) {
            if (map[i][i] == symb) {
                counter++;
            }
        }
        if (counter == DOTS_TO_WIN) {
            return true;
        }
        counter = 0;
        for (int i = 0, j = SIZE - 1; i < SIZE; i++, j--) {
            if (map[i][j] == symb) {
                counter++;
            }
        }
        if (counter == DOTS_TO_WIN) {
            return true;
        }
        return false;
    }


    // Проверка заполненности карты
    public static boolean isMapFull () {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (map[i][j] == DOT_EMPTY) { return false; }
            }
        }
        return true;
    }

}
